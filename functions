#!/bin/bash

################################################################################
# Variables                                                                    #
################################################################################

# Set PATH
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Set encode from docker options
encode=${ENCODE}

# Location to create log files
readonly log_dir="/media/log"
readonly log="${log_dir}/container.log"
readonly handbrake_log="${log_dir}/HandBrake_Options_"
readonly mkvlog="${log_dir}/converted-mkv_"
readonly mp4log="${log_dir}/converted-mp4_"
readonly failedlog="${log_dir}/FAILED_"

# Base directory for media files
media_base="/media/Complete"

# Location to check for new media files
movie_add="${media_base}/Movies"
tv_add="${media_base}/TVShows"

# Location to move media files to for conversion
movie_convert="${media_base}/Convert/Movies"
tv_convert="${media_base}/Convert/TVShows"

# Location to move media files to for ingestion by SickChill, CoachPotato, etc
movie_import="${media_base}/IMPORT/Movies"
tv_import="${media_base}/IMPORT/TVShows"

# Location of binaries used by container
handbrake=/usr/local/bin/HandBrakeCLI
ffmpeg=/usr/local/bin/ffmpeg
mediainfo=/usr/bin/mediainfo

# Set colors for status message
red='\e[1;31m'
yellow='\e[1;33m'
green='\e[1;32m'
white='\e[1;97m'
clear='\e[0m'

################################################################################
# Functions                                                                    #
################################################################################

# Exit function when script misbehaves
die(){
  print_info "Fail point: ${BASH_SOURCE[1]}: line ${BASH_LINENO[0]}: ${FUNCNAME[1]}" >&2
  exit 1
}

# Create status messages
print_error(){ echo -e "${red}[ERROR]: ${1}${clear}"|tee -a ${log}; }
print_warning(){ echo -e "${yellow}[WARNING]: ${1}${clear}"|tee -a ${log}; }
print_info(){ echo -e "${white}${1}${clear}"|tee -a ${log}; }
print_notice(){ echo -e "${white}[NOTICE]: ${1}${clear}"|tee -a ${log}; }
print_ok(){ echo -e "${green}[OK]: ${1}${clear}"|tee -a ${log}; }

# Set mod time of dummyfile so we can generate uptime for container
container_uptime(){
  touch /var/tmp/.media-converter.uptime
}

# Add "media" user and group, and map them to provided UID/GID or 1000 if not provided
add_user(){
  if [[ ! $(grep 'media' /etc/passwd) ]]; then
    groupadd -g "${2}" media
    useradd -s /bin/bash -m -u "${1}" -g media media
    print_info "\"media\" user is mapped to external UID $(id -u media)"
    print_info "\"media\" group is mapped to external GID $(id -g media)"
  fi
}

# Set timezone inside container for logfile entries
set_timezone(){
  echo "${TZ}"|tee /etc/timezone
  dpkg-reconfigure -f noninteractive tzdata > /dev/null 2>&1
  print_info "Timezone set to ${TZ}"
  print_info "Current date and time inside container: $(date +%b-%d" "%H:%M)"
}

# Setup logfile
setup_logfile(){
  for media_type in TV MOVIE; do
    for logfile in mkvlog mp4log failedlog handbrake_log; do
    if [[ ! -f "${!logfile}${media_type}.log" ]]; then
      touch "${!logfile}${media_type}.log"
      chown media:media "${!logfile}${media_type}.log"
    fi
    done
  done
}

# Check if /media is mounted to an external volume and writeable by media user
check_mount(){
  if ! mountpoint /media; then
    print_error "\"/media\" NOT mounted to external volume"
    die
  fi
}

# Create directory passed to function and set ownership to \"media\" user"
create_directory(){
  local -r directory="${1}"
  if [[ -d "${directory}" ]]; then
    directory_writeable "${directory}"
  else
    if [[ $(mkdir -p "${directory}") ]]; then
      print_ok "Created ${directory}"
    else
      print_error "Unable to create ${directory}"
      die
    fi
    chown media:media "${directory}"
  fi
}

# Print niceness level for logfile
print_priority_info(){
  if [[ ${MEDIA_SERVER} == "no" ]]; then
    print_info "\"MEDIA_SERVER\" variable set to ${MEDIA_SERVER}, leaving default niceness for converter functions"
  else
    print_info "\"MEDIA_SERVER\" variable set to ${MEDIA_SERVER}, lowering niceness for converter functions"
  fi
}

# Set niceness level of encoder actions
set_priority(){
  if [[ ${1} == "no" ]]; then
    nice_level='-0'
  else
    nice_level='-15'
  fi
  echo "${nice_level}"
}

# Check if directory passed to function is writeable by \"media\" user"
directory_writeable(){
  sudo -u media bash -c "source /opt/functions && if [[ ! -w \"${1}\" ]]; then \
                           print_error \"${1} not writeable by UID ${PUID}\"; \
                           die; \
                        fi"
}

move_media(){
  # This ignores any files that might be sample media files (TV shows under 50MB in size and Movies under 500MB)
  if [[ "$(ls -A "${tv_add}")" ]]; then
    find "${tv_add}/" -type f -not -name '*sample*' -size +50M -regex '.*\.\(avi\|mod\|mpg\|mp4\|m4v\|mkv\)' -exec mv {} "${tv_convert}/" \;
  fi
  if [[ "$(ls -A "${movie_add}")" ]]; then
    find "${movie_add}/" -type f -not -name '*sample*' -size +500M -regex '.*\.\(avi\|mod\|mpg\|mp4\|m4v\|mkv\)' -exec mv {} "${movie_convert}/" \;
  fi
  # Remove left behind files older than 7 days
  find "${tv_add}/" -ctime +7 -exec rm {} +
  find "${movie_add}/" -ctime +7 -exec rm {} +
}
