#!/bin/bash

source /opt/functions

# Generate uptime and container creation time
get_container_uptime(){
  container_start=$(stat -c %Y /var/tmp/.media-converter.uptime)
  current_epoch=$(date +%s)
  num=$((current_epoch - container_start))
  min=0
  hour=0
  day=0
  if((num>59));then
      ((sec=num%60))
      ((num=num/60))
      if((num>59));then
          ((min=num%60))
          ((num=num/60))
          if((num>23));then
            ((hour=num%24))
            ((day=num/24))
          else
            ((hour=num))
          fi
      else
        ((min=num))
      fi
  else
    ((sec=num))
  fi
  container_uptime="${day}d ${hour}h ${min}m ${sec}s"
}

#Set "Movie" or "Movies" in convert count
movie_grammar(){
  if [[ ${movie_count} -eq 1 ]]; then
    echo "There is ${movie_count} Movie"
  else
    echo "There are ${movie_count} Movies"
  fi
}

#Set "show" or "shows" in convert count
tv_grammar(){
  if [[ ${tv_count} -eq 1 ]]; then
    echo "There is ${tv_count} TV episode"
  else
    echo "There are ${tv_count} TV episodes"
  fi
}

#Check free space for a device and provide mount point
check_space(){
  declare -i full=$(df -h "$1"|tail -1|awk '{print $5}'|tr -d %)
  (( full < 60 )) && print_ok "${1} is ${full}% full"
  (( full > 60 )) && (( ${full} < 75 )) && print_warning "${1} is ${full}% full"
  (( full > 75 )) && print_error "${1} is ${full}% full"
}

main(){
  clear
  get_container_uptime
  echo -e "\e[1;97mContainer created: $(date -d @$(stat -c %Y /var/tmp/.media-converter.create) "+%b-%d-%Y %H:%M")"
  echo -e "Container uptime: ${container_uptime}\n"
  check_space "/media"
  declare -i tv_count=$(ls -1 "${tv_convert}" | egrep -v "-converted.mp4|.srt")
  declare -i movie_count=$(ls -1 "${movie_convert}" | egrep -v "-converted.mp4|.srt")
  print_info "\n$(tv_grammar) waiting to be encoded"
  print_info "$(movie_grammar) waiting to be encoded\n"
  [[ $(pgrep ffmpeg) ]] && print_notice "FFMPEG is running"
  if [[ $(pgrep HandBrakeCLI) ]]; then
    print_notice "HandBrake is converting:\n$(ps -ef|grep -o "\-\-output.*"|sed -e 's/\-\-output \/media\/Complete\/Convert\/.*\///' -e 's/\-converted\.mp4//')\n\t$(grep Encoding /log/handbrake_output.log|tail -1|mawk -F',' '{print $2$NF}')"
  else
    print_notice "No current encode jobs running"
  fi
}

main
